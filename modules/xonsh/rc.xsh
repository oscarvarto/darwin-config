#!/usr/bin/env xonsh
# Xonsh configuration for darwin-config

# =============================================================================
# Environment Setup
# =============================================================================

# Import required modules
import os
import sys
from pathlib import Path

# macOS-specific environment
$LANG = "en_US.UTF-8"
$LC_ALL = "en_US.UTF-8"
$TERM = "xterm-256color"
$COLORTERM = "truecolor"

# Development tools
$EDITOR = "emacsclient -t"
$VISUAL = "zed -w"
$GIT_EDITOR = "emacsclient -t"
$BAT_THEME = "ansi"

# =============================================================================
# Xonsh Configuration
# =============================================================================

# Prompt and appearance
$XONSH_SHOW_TRACEBACK = True
$XONSH_STORE_STDOUT = True
$COMPLETIONS_CONFIRM = True
$XONSH_AUTOPAIR = True
$AUTO_CD = True
$XONSH_HISTORY_SIZE = (8128, 'commands')
$HISTCONTROL = 'ignoredups'

# Vi mode (can be changed to emacs)
$VI_MODE = True

# Colors and styling - dynamic theme support
import os
import subprocess

def get_catppuccin_theme():
    """Detect current Catppuccin theme from environment or config"""
    # Check if theme switcher has set a preference
    theme_file = os.path.expanduser("~/.cache/catppuccin_theme")
    if os.path.exists(theme_file):
        try:
            with open(theme_file, 'r') as f:
                theme = f.read().strip()
                return theme
        except:
            pass

    # Fallback: check for system dark mode on macOS
    try:
        result = subprocess.run(['defaults', 'read', '-g', 'AppleInterfaceStyle'],
                              capture_output=True, text=True)
        if result.returncode == 0 and 'Dark' in result.stdout:
            return 'mocha'  # Dark theme
        else:
            return 'latte'  # Light theme
    except:
        return 'latte'  # Default to light theme

# Set xonsh color style based on detected theme
current_theme = get_catppuccin_theme()
if current_theme == 'mocha':
    $XONSH_COLOR_STYLE = 'monokai'  # Dark color scheme for mocha
elif current_theme == 'latte':
    $XONSH_COLOR_STYLE = 'friendly'  # Light color scheme for latte - better than 'vs'
else:
    # Fallback - try to detect system theme
    try:
        result = subprocess.run(['defaults', 'read', '-g', 'AppleInterfaceStyle'],
                              capture_output=True, text=True)
        if result.returncode == 0 and 'Dark' in result.stdout:
            $XONSH_COLOR_STYLE = 'monokai'  # System dark mode
        else:
            $XONSH_COLOR_STYLE = 'friendly'  # System light mode
    except:
        $XONSH_COLOR_STYLE = 'friendly'  # Safe default for light theme

# Optional: Show theme info (uncomment to debug)
# print(f"üé® Xonsh using theme '{current_theme}' with color style: " + $XONSH_COLOR_STYLE)

# =============================================================================
# Xontrib Integration
# =============================================================================
# Xontrib loading is generated by modules/xonsh/default.nix

# =============================================================================
# Direct Tool Integration (configured via generated config)
# =============================================================================
# Note: Tool integration is handled by the generated configuration from default.nix
# to avoid duplicate initialization. This section is reserved for any additional
# manual configuration that can't be auto-generated.

# =============================================================================
# Direnv Integration
# =============================================================================

try:
    # Check if direnv is available
    direnv_path = $(which direnv).strip()
    if direnv_path:
        # Direnv doesn't have native xonsh support, manual setup needed
        def _direnv_hook():
            """Manual direnv integration"""
            import os
            import subprocess
            try:
                result = subprocess.run(['direnv', 'export', 'json'],
                                      capture_output=True, text=True, cwd=os.getcwd())
                if result.returncode == 0:
                    import json
                    env_vars = json.loads(result.stdout)
                    for key, value in env_vars.items():
                        os.environ[key] = value
                        # Update xonsh environment
                        __xonsh__.env[key] = value
            except:
                pass

        # Hook into directory changes
        aliases['direnv-hook'] = _direnv_hook
except:
    print("Warning: Direnv not found")

# =============================================================================
# Mise Integration - Disabled due to recursion issues
# =============================================================================

# Note: Mise integration disabled due to recursion errors in xonsh
# You can manually activate mise environments as needed with: mise shell
# print("Info: Mise integration disabled to prevent recursion errors")

# =============================================================================
# Custom Aliases and Functions
# =============================================================================

# Modern CLI tools
aliases['ls'] = 'eza --icons'
aliases['ll'] = 'eza -la --icons'
aliases['la'] = 'eza -la --icons'
aliases['tree'] = 'eza --tree --icons'
aliases['cat'] = 'bat'
aliases['find'] = 'fd'
aliases['grep'] = 'rg'

# Git aliases
aliases['g'] = 'git'
aliases['gs'] = 'git status'
aliases['gd'] = 'git diff'
aliases['ga'] = 'git add'
aliases['gc'] = 'git commit'
aliases['gp'] = 'git push'
aliases['gl'] = 'git log --oneline'

# Directory navigation
aliases['..'] = 'cd ..'
aliases['...'] = 'cd ../..'
aliases['....'] = 'cd ../../..'

# macOS specific
aliases['pbcopy'] = 'pbcopy'
aliases['pbpaste'] = 'pbpaste'
aliases['o'] = 'open'

# Emacs
aliases['e'] = 'emacsclient -t'
aliases['ec'] = 'emacsclient -c'

# =============================================================================
# macOS Integration Functions
# =============================================================================

def _open_with_default(args):
    """Open files with default macOS application"""
    subprocess.run(['open'] + args)

aliases['open'] = _open_with_default

# =============================================================================
# Error Handling for Missing Tools
# =============================================================================

# Graceful fallback for missing modern tools
if not $(which eza):
    aliases['ls'] = 'ls -G'
    aliases['ll'] = 'ls -la'
    aliases['la'] = 'ls -la'

if not $(which bat):
    aliases['cat'] = 'cat'

if not $(which fd):
    aliases['find'] = 'find'

if not $(which rg):
    aliases['grep'] = 'grep'

print("üêö Xonsh configuration loaded successfully!")
