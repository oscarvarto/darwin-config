#!/usr/bin/env bash

# Emacs Build Monitor
# Provides real-time progress indicators for Emacs builds
# Shows compilation phases, estimated time remaining, and current activity

set -euo pipefail

VERSION="1.0.0"

show_help() {
    cat << 'HELP_EOF'
🔍 Emacs Build Monitor v$VERSION

Monitors Nix Emacs builds in real-time, showing progress indicators,
phase information, and estimated completion times.

USAGE:
    emacs-build-monitor [OPTIONS] [COMMAND]

OPTIONS:
    -h, --help          Show this help message
    -v, --version       Show version information
    -f, --follow        Follow build logs in real-time (default)
    -s, --summary       Show build summary only
    --no-emoji          Disable emoji output for terminals that don't support them

COMMANDS:
    monitor             Start monitoring current/next Emacs build (default)
    status              Check if an Emacs build is currently running
    last                Show status of the last Emacs build attempt

WHAT IT MONITORS:
    • Configure phase (autotools setup)
    • Compilation phase (C source files)
    • Native compilation phase (Elisp to native code)
    • Installation phase (copying files)
    • Build failures and error locations

USAGE EXAMPLES:
    emacs-build-monitor                    # Start monitoring
    emacs-build-monitor status             # Check if build is running
    emacs-build-monitor --summary          # Show summary without following

    # Use with Nix builds
    nb --verbose 2>&1 | emacs-build-monitor --follow

EXIT CODES:
    0    Success or monitoring complete
    1    Build failed or error occurred
    2    Invalid arguments

HELP_EOF
}

show_version() {
    echo "Emacs Build Monitor v$VERSION"
    echo "Real-time Nix Emacs build progress tracking"
}

# Configuration
FOLLOW_MODE=true
SUMMARY_ONLY=false
USE_EMOJI=true

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -v|--version)
            show_version
            exit 0
            ;;
        -f|--follow)
            FOLLOW_MODE=true
            shift
            ;;
        -s|--summary)
            SUMMARY_ONLY=true
            FOLLOW_MODE=false
            shift
            ;;
        --no-emoji)
            USE_EMOJI=false
            shift
            ;;
        monitor|status|last)
            COMMAND="$1"
            shift
            ;;
        -*)
            echo "Error: Unknown option $1" >&2
            echo "Use --help for usage information" >&2
            exit 2
            ;;
        *)
            echo "Error: Unexpected argument $1" >&2
            echo "Use --help for usage information" >&2
            exit 2
            ;;
    esac
done

# Set default command
COMMAND="${COMMAND:-monitor}"

# Emoji/text settings
if [[ "$USE_EMOJI" == "true" ]]; then
    HAMMER="🔨"
    ROCKET="🚀"
    CHECK="✅"
    CROSS="❌"
    CLOCK="⏱️"
    GEAR="⚙️"
    PACKAGE="📦"
    MAGNIFY="🔍"
    WARNING="⚠️"
else
    HAMMER="[BUILD]"
    ROCKET="[NATIVE]"
    CHECK="[DONE]"
    CROSS="[FAIL]"
    CLOCK="[TIME]"
    GEAR="[CONFIG]"
    PACKAGE="[INSTALL]"
    MAGNIFY="[SEARCH]"
    WARNING="[WARN]"
fi

# Build phase tracking
BUILD_START_TIME=""
CURRENT_PHASE="unknown"
PHASE_START_TIME=""

# Function to format elapsed time
format_elapsed() {
    local seconds=$1
    local minutes=$((seconds / 60))
    local remaining_seconds=$((seconds % 60))

    if [[ $minutes -gt 0 ]]; then
        printf "%dm %02ds" "$minutes" "$remaining_seconds"
    else
        printf "%ds" "$seconds"
    fi
}

# Function to detect build phase from log line
detect_phase() {
    local line="$1"
    local new_phase="$CURRENT_PHASE"

    # Configure phase
    if [[ "$line" =~ "configure"|"checking for"|"creating config" ]]; then
        new_phase="configure"
    # Main compilation phase
    elif [[ "$line" =~ "gcc"|"clang"|"CC.*\.o"|"linking" ]]; then
        new_phase="compile"
    # Native compilation phase
    elif [[ "$line" =~ "native.comp"|"Compiling.*\.el"|"ELC.*\.elc" ]]; then
        new_phase="native-comp"
    # Installation phase
    elif [[ "$line" =~ "make.*install"|"installing"|"mkdir.*bin" ]]; then
        new_phase="install"
    # Error detection
    elif [[ "$line" =~ "Error"|"error:"|"failed"|"FAILED" ]]; then
        new_phase="error"
    fi

    # Phase change detection
    if [[ "$new_phase" != "$CURRENT_PHASE" && "$new_phase" != "unknown" ]]; then
        if [[ -n "$PHASE_START_TIME" ]]; then
            local phase_duration=$(($(date +%s) - PHASE_START_TIME))
            echo "$CHECK Phase '$CURRENT_PHASE' completed in $(format_elapsed $phase_duration)"
        fi

        CURRENT_PHASE="$new_phase"
        PHASE_START_TIME=$(date +%s)

        case "$CURRENT_PHASE" in
            configure)
                echo "$GEAR Starting configure phase (autotools setup)..."
                ;;
            compile)
                echo "$HAMMER Starting compilation phase (C source files)..."
                echo "$CLOCK Estimated time: 15-25 minutes"
                ;;
            native-comp)
                echo "$ROCKET Starting native compilation (Elisp to native code)..."
                echo "$CLOCK Estimated time: 10-20 minutes"
                ;;
            install)
                echo "$PACKAGE Starting installation phase..."
                echo "$CLOCK Estimated time: 2-5 minutes"
                ;;
            error)
                echo "$CROSS Build error detected!"
                ;;
        esac
    fi
}

# Function to show progress summary
show_progress_summary() {
    if [[ -n "$BUILD_START_TIME" ]]; then
        local total_elapsed=$(($(date +%s) - BUILD_START_TIME))
        echo "$CLOCK Total build time: $(format_elapsed $total_elapsed)"
        echo "$GEAR Current phase: $CURRENT_PHASE"

        # Show phase-specific estimates
        case "$CURRENT_PHASE" in
            configure)
                echo "$CLOCK Configure phase typically takes 1-3 minutes"
                ;;
            compile)
                echo "$CLOCK Main compilation typically takes 15-25 minutes"
                ;;
            native-comp)
                echo "$CLOCK Native compilation typically takes 10-20 minutes"
                ;;
            install)
                echo "$CLOCK Installation typically takes 2-5 minutes"
                ;;
        esac
    fi
}

# Function to check if Emacs build is running
check_build_status() {
    local emacs_build_running=false

    # Check for nix build processes
    if pgrep -f "nix.*build.*emacs" >/dev/null 2>&1; then
        emacs_build_running=true
        echo "$HAMMER Emacs build is currently running"
    elif pgrep -f "make.*emacs" >/dev/null 2>&1; then
        emacs_build_running=true
        echo "$HAMMER Emacs compilation is currently running"
    else
        echo "$MAGNIFY No active Emacs build detected"
    fi

    return $([ "$emacs_build_running" = true ] && echo 0 || echo 1)
}

# Main monitoring function
monitor_build() {
    echo "$MAGNIFY Starting Emacs build monitor..."
    echo "$CLOCK Monitor started at $(date)"

    BUILD_START_TIME=$(date +%s)

    if [[ "$FOLLOW_MODE" == "true" ]]; then
        echo "$MAGNIFY Following build output (Ctrl+C to stop)..."
        echo "───────────────────────────────────────────────────────────"

        # If reading from stdin (piped input)
        if [[ ! -t 0 ]]; then
            while IFS= read -r line; do
                echo "$line"
                detect_phase "$line"

                # Show periodic progress updates
                if [[ $(($(date +%s) % 60)) -eq 0 ]]; then
                    show_progress_summary
                fi
            done
        else
            echo "$WARNING No build output detected on stdin"
            echo "Try: nb --verbose 2>&1 | emacs-build-monitor"
        fi
    else
        check_build_status
    fi
}

# Execute command
case "$COMMAND" in
    monitor)
        monitor_build
        ;;
    status)
        check_build_status
        ;;
    last)
        echo "$MAGNIFY Checking last Emacs build logs..."
        # Try to find recent Emacs build logs
        if [[ -d "/nix/var/log/nix/drvs" ]]; then
            find /nix/var/log/nix/drvs -name "*emacs*" -type f -exec ls -lt {} \; 2>/dev/null | head -5
        else
            echo "$WARNING Build logs directory not found"
        fi
        ;;
    *)
        echo "Error: Unknown command $COMMAND" >&2
        exit 2
        ;;
esac

if [[ "$SUMMARY_ONLY" == "true" ]]; then
    show_progress_summary
fi