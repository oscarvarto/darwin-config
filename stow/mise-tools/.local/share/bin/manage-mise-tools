#!/usr/bin/env nu

# Script to manage mise runtimes using stow-tracked configuration
# Usage: manage-mise-tools <command>

def main [command: string = "help"] {
    let mise_tools_dir = $"($env.HOME)/nixos-config/stow/mise-tools"
    let config_file = $"($mise_tools_dir)/mise-tools.toml"
    
    if not ($config_file | path exists) {
        print "❌ Error: Mise tools config file not found at ~/nixos-config/stow/mise-tools/mise-tools.toml"
        exit 1
    }
    
    match $command {
        "install" | "sync" => {
            print "🚀 Installing/syncing mise runtimes from configuration..."
            
            let config = (open $config_file)
            let runtimes = $config.runtimes
            let settings = $config.settings
            
            print "🔧 Installing runtime versions..."
            
            for runtime_name in ($runtimes | columns) {
                let runtime_versions = ($runtimes | get $runtime_name)
                
                print $"\n📦 Processing ($runtime_name) runtime:"
                
                for version_info in $runtime_versions {
                    let version = ($version_info | get version)
                    let description = ($version_info | get description? | default "No description")
                    let is_global = ($version_info | get global? | default false)
                    
                    print $"  • ($version): ($description)"
                    
                    # Try to install the exact version first
                    let install_result = (try {
                        mise install $"($runtime_name)@($version)"
                        "success"
                    } catch { |err|
                        if ($settings.use_fallback_newer? | default true) {
                            print $"    ⚠️  Exact version ($version) not available, searching for newer version..."
                            
                            # Extract version pattern for fallback
                            let version_parts = ($version | split row "-")
                            let provider = if ($version_parts | length) > 1 { 
                                ($version_parts | get 0) 
                            } else { 
                                "" 
                            }
                            
                            # Get available versions for this runtime
                            let available_versions = try {
                                mise ls-remote $runtime_name 
                                | lines 
                                | each { |line| $line | str trim }
                                | where { |v| $v != "" }
                            } catch {
                                []
                            }
                            
                            # Find newer version with same provider
                            let fallback_version = if $provider != "" {
                                $available_versions 
                                | where { |v| $v | str starts-with $provider }
                                | last
                            } else {
                                $available_versions | last
                            }
                            
                            if $fallback_version != null and $fallback_version != $version {
                                print $"    🔄 Trying fallback version: ($fallback_version)"
                                try {
                                    mise install $"($runtime_name)@($fallback_version)"
                                    print $"    ✅ Installed fallback version ($fallback_version)"
                                    $fallback_version
                                } catch {
                                    print $"    ❌ Failed to install fallback version"
                                    "failed"
                                }
                            } else {
                                print $"    ❌ No suitable fallback version found"
                                "failed"
                            }
                        } else {
                            print $"    ❌ Installation failed and fallback is disabled"
                            "failed"
                        }
                    })
                    
                    if $install_result == "success" {
                        print $"    ✅ Successfully installed ($version)"
                        
                        # Set as global if specified
                        if $is_global {
                            print $"    🌐 Setting ($version) as global default for ($runtime_name)"
                            mise global $"($runtime_name)@($version)"
                        }
                    } else if ($install_result | str contains $runtime_name) {
                        # This means we got a fallback version
                        if $is_global {
                            print $"    🌐 Setting ($install_result) as global default for ($runtime_name)"
                            mise global $"($runtime_name)@($install_result)"
                        }
                    }
                }
            }
            
            print "\n🎉 Mise runtimes installation completed!"
            print "\n💡 Run 'mise current' to see active versions"
        }
        
        "list" => {
            print "📋 Configured mise runtimes:"
            let config = (open $config_file)
            let runtimes = $config.runtimes
            
            for runtime_name in ($runtimes | columns) {
                let runtime_versions = ($runtimes | get $runtime_name)
                print $"\n🔧 ($runtime_name):"
                
                for version_info in $runtime_versions {
                    let version = ($version_info | get version)
                    let description = ($version_info | get description? | default "No description")
                    let is_global = ($version_info | get global? | default false)
                    let global_marker = if $is_global { " (global)" } else { "" }
                    
                    print $"  • ($version)($global_marker): ($description)"
                }
            }
        }
        
        "status" => {
            print "📊 Mise tools status:"
            let config = (open $config_file)
            let runtimes = $config.runtimes
            
            # Get currently installed versions
            let installed_runtimes = try {
                mise list
                | lines
                | skip 1  # Skip header
                | each { |line|
                    if ($line | str trim | str length) > 0 {
                        let parts = ($line | str trim | split row -r '\s+')
                        if ($parts | length) >= 2 {
                            {
                                tool: ($parts | get 0),
                                version: ($parts | get 1),
                                source: ($parts | get 2?),
                                requested: ($parts | get 3?)
                            }
                        }
                    }
                }
                | compact
            } catch {
                []
            }
            
            print "\n🔧 Runtime Status:"
            for runtime_name in ($runtimes | columns) {
                let runtime_versions = ($runtimes | get $runtime_name)
                print $"\n📦 ($runtime_name):"
                
                for version_info in $runtime_versions {
                    let version = ($version_info | get version)
                    let description = ($version_info | get description? | default "No description")
                    let is_global = ($version_info | get global? | default false)
                    
                    # Check if this version is installed
                    let is_installed = ($installed_runtimes | any { |r| 
                        $r.tool == $runtime_name and $r.version == $version 
                    })
                    
                    let status_icon = if $is_installed { "✅" } else { "❌" }
                    let global_marker = if $is_global { " (global)" } else { "" }
                    
                    print $"  ($status_icon) ($version)($global_marker) -> ($description)"
                }
            }
            
            print "\n🌐 Current global versions:"
            try {
                mise current
            } catch {
                print "  ❌ Failed to get current versions"
            }
        }
        
        "installed" => {
            print "📦 All installed mise runtimes:"
            
            try {
                mise list
            } catch {
                print "❌ Failed to list installed runtimes. Is mise installed?"
            }
        }
        
        "update" => {
            print "🔄 Updating mise and checking for runtime updates..."
            
            # Update mise itself first
            print "📦 Updating mise..."
            try {
                mise self-update
            } catch {
                print "⚠️  Failed to update mise (you may need to update it manually)"
            }
            
            # Check for outdated runtimes
            print "\n🔍 Checking for outdated runtimes..."
            try {
                mise outdated
            } catch {
                print "💡 No outdated runtimes or outdated command not available"
            }
            
            let config = (open $config_file)
            let auto_update = ($config.settings.auto_update? | default true)
            
            let should_update = if $auto_update {
                true
            } else {
                print "⚠️  Auto-update is disabled in configuration"
                let response = (input "Do you want to run sync to update runtimes? (y/N): ")
                if $response != "y" and $response != "Y" {
                    print "Update cancelled."
                    exit 0
                }
                true
            }
            
            if $should_update {
                print "\n🔄 Re-syncing configured runtimes..."
                manage-mise-tools install
            }
        }
        
        "clean" => {
            print "🧹 Cleaning up mise cache and old versions..."
            
            let config = (open $config_file)
            let cleanup_old = ($config.settings.cleanup_old_versions? | default false)
            
            if $cleanup_old {
                print "🗑️  Cleaning up old runtime versions..."
                try {
                    mise prune
                } catch {
                    print "⚠️  Prune command failed or not available"
                }
            } else {
                print "💡 Old version cleanup is disabled in configuration"
                let response = (input "Do you want to clean up old versions anyway? (y/N): ")
                if $response == "y" or $response == "Y" {
                    try {
                        mise prune
                        print "✅ Old versions cleaned up"
                    } catch {
                        print "❌ Failed to clean up old versions"
                    }
                }
            }
            
            print "🗂️  Clearing mise cache..."
            try {
                mise cache clear
                print "✅ Cache cleared"
            } catch {
                print "⚠️  Cache clear failed or not available"
            }
        }
        
        "add" => {
            print "➕ Add a new runtime to mise-tools.toml"
            let runtime_name = (input "Runtime name (e.g., java, python, nodejs): ")
            let version = (input "Version (e.g., corretto-21.0.7.6.1): ")
            let description = (input "Description (optional): ")
            let is_global = (input "Set as global default? (y/N): ")
            
            if ($runtime_name | str length) == 0 or ($version | str length) == 0 {
                print "❌ Runtime name and version are required"
                exit 1
            }
            
            let final_description = if ($description | str length) == 0 { 
                $"($runtime_name) ($version)" 
            } else { 
                $description 
            }
            let global_setting = ($is_global == "y" or $is_global == "Y")
            
            print $"📝 Adding ($runtime_name)@($version) to configuration..."
            print $"   Description: ($final_description)"
            print $"   Global: ($global_setting)"
            print ""
            print "⚠️  You'll need to manually edit ~/nixos-config/stow/mise-tools/mise-tools.toml"
            print $"   Add this to the [runtimes] section:"
            if $global_setting {
                print $"   ($runtime_name) = [{{ version = \"($version)\", description = \"($final_description)\", global = true }}]"
            } else {
                print $"   ($runtime_name) = [{{ version = \"($version)\", description = \"($final_description)\" }}]"
            }
        }
        
        "doctor" => {
            print "🩺 Running mise doctor to check configuration..."
            # Run mise doctor - it may return non-zero exit code if issues are found
            run-external "mise" "doctor"
        }
        
        "help" | _ => {
            print "🛠️  Mise Tools Manager"
            print ""
            print "Usage: manage-mise-tools <command>"
            print ""
            print "Commands:"
            print "  install, sync     Install all runtimes from configuration"
            print "  list              List configured runtimes"
            print "  status            Check installation status of configured runtimes"
            print "  installed         List all installed runtimes"
            print "  update            Update mise and check for runtime updates"
            print "  clean             Clean cache and old versions"
            print "  add               Interactive tool to add new runtime to config"
            print "  doctor            Run mise doctor for troubleshooting"
            print "  help              Show this help message"
            print ""
            print "Configuration file: ~/nixos-config/stow/mise-tools/mise-tools.toml"
            print "Runtimes are managed via 'mise install' and 'mise global'"
            print ""
            print "💡 Tips:"
            print "  - After system restore: run 'manage-mise-tools install'"
            print "  - To update runtimes: run 'manage-mise-tools update'"
            print "  - Configuration is version-controlled with your nixos-config"
            print "  - Script handles version fallbacks for unavailable versions"
        }
    }
}
