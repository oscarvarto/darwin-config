#!/usr/bin/env nu

# Script to manage stow packages using GNU Stow
# Usage: manage-stow-packages <command>

def main [command: string = "help", --force (-f)] {
    let stow_dir = $"($env.HOME)/darwin-config/stow"
    
    if not ($stow_dir | path exists) {
        print "‚ùå Error: Stow directory not found at ~/darwin-config/stow"
        exit 1
    }
    
    # Determine stow options based on force flag
    let stow_options = if $force {
        ["--restow", "--adopt"]
    } else {
        []
    }
    
    match $command {
        "deploy" | "install" => {
            if $force {
                print "üöÄ Force deploying stow packages (will overwrite existing files)..."
                print "‚ö†Ô∏è  Warning: Using --adopt mode - existing files will be imported into stow packages"
            } else {
                print "üöÄ Deploying stow packages..."
            }
            
            cd $stow_dir
            
            # Define all packages to deploy
            let packages = [
                "aux-scripts",
                "nix-scripts", 
                "raycast-scripts",
                "cargo-tools",
                "nodejs-tools",
                "dotnet-tools",
                "doom-emacs",
                "lazyvim",
                "zed"
            ]
            
            # Deploy each package and collect results
            let results = $packages | each { |package|
                print $"üì¶ Processing ($package)..."
                
                let result = try {
                    if ($stow_options | length) > 0 {
                        # With force options
                        run-external "stow" "-t" $env.HOME "--restow" "--adopt" $package
                    } else {
                        # Normal deployment
                        run-external "stow" "-t" $env.HOME $package
                    }
                    print $"  ‚úÖ ($package) deployed successfully"
                    {package: $package, success: true, error: null}
                } catch { |e|
                    print $"  ‚ùå Failed to deploy ($package): ($e.msg)"
                    {package: $package, success: false, error: $e.msg}
                }
                $result
            }
            
            let failed_packages = $results | where success == false | get package
            let success_count = $results | where success == true | length
            
            # Report results
            if ($failed_packages | length) == 0 {
                print "\n‚úÖ All stow packages deployed successfully!"
                print $"üìÇ Scripts are now available in ($env.HOME)/.local/share/bin/"
                print $"üé® Editor configs deployed to ~/.doom.d/, ~/.config/nvim/, and ~/.config/zed/"
            } else {
                print $"\n‚ö†Ô∏è  Deployment completed with ($failed_packages | length) failures:"
                for failed in $failed_packages {
                    print $"  ‚Ä¢ ($failed)"
                }
                print "\nüí° Try running with --force flag to overwrite existing files:"
                print $"   manage-stow-packages deploy --force"
                if not $force {
                    exit 1
                }
            }
        }
        
        "remove" | "uninstall" => {
            print "üóëÔ∏è  Removing stow packages..."
            
            cd $stow_dir
            
            # Core script packages  
            stow -D -t ~ aux-scripts
            stow -D -t ~ nix-scripts
            stow -D -t ~ raycast-scripts
            
            # Development tool managers
            stow -D -t ~ cargo-tools
            stow -D -t ~ nodejs-tools
            stow -D -t ~ dotnet-tools
            
            # Editor configurations
            stow -D -t ~ doom-emacs
            stow -D -t ~ lazyvim
            stow -D -t ~ zed
            
            if $env.LAST_EXIT_CODE == 0 {
                print "‚úÖ Stow packages removed successfully!"
            } else {
                print "‚ùå Failed to remove stow packages"
                exit 1
            }
        }
        
        "status" => {
            print "üìä Checking status of auxiliary scripts..."
            
            let scripts = (ls $"($stow_dir)/aux-scripts/.local/share/bin" | get name | path basename)
            
            print $"\nüìÇ Available scripts in stow package: ($scripts | length)"
            for script in $scripts {
                print $"  ‚Ä¢ ($script)"
            }
            
            print $"\nüîó Deployed scripts:"
            for script in $scripts {
                let target_path = $"($env.HOME)/.local/share/bin/($script)"
                if ($target_path | path exists) {
                    let link_info = (ls -la $target_path | get 0)
                    if ($link_info.type == "symlink") {
                        print $"  ‚úÖ ($script) -> correctly symlinked"
                    } else {
                        print $"  ‚ö†Ô∏è  ($script) -> exists but not a symlink"
                    }
                } else {
                    print $"  ‚ùå ($script) -> not deployed"
                }
            }
        }
        
        "list" => {
            print "üìã Available scripts in stow package:"
            let scripts = (ls $"($stow_dir)/aux-scripts/.local/share/bin" | get name | path basename)
            for script in $scripts {
                print $"  ‚Ä¢ ($script)"
            }
        }
        
        "help" | _ => {
            print "üõ†Ô∏è  Stow Package Manager"
            print ""
            print "Usage: manage-stow-packages <command> [--force]"
            print ""
            print "Commands:"
            print "  deploy, install    Deploy all stow packages using stow"
            print "  remove, uninstall  Remove all stow packages (unstow)"
            print "  status             Check deployment status of scripts"
            print "  list               List available scripts in aux-scripts"
            print "  help               Show this help message"
            print ""
            print "Options:"
            print "  --force, -f        Force deployment, overwriting existing files"
            print "                     Uses --restow and --adopt stow options"
            print "                     WARNING: --adopt imports existing files into stow packages"
            print ""
            print "Examples:"
            print "  manage-stow-packages deploy          # Safe deployment (fails on conflicts)"
            print "  manage-stow-packages deploy --force  # Force deployment (imports conflicting files)"
            print ""
            print "üìÅ Available Stow Packages:"
            print "  ‚Ä¢ aux-scripts      - Core utility scripts"
            print "  ‚Ä¢ nix-scripts      - Nix-related utilities (smart-gc, etc.)"
            print "  ‚Ä¢ raycast-scripts  - Raycast automation scripts"
            print "  ‚Ä¢ cargo-tools      - Rust/Cargo tools management"
            print "  ‚Ä¢ nodejs-tools     - Node.js tools and toolchain"
            print "  ‚Ä¢ dotnet-tools     - .NET SDK and global tools"
            print "  ‚Ä¢ doom-emacs       - Complete Doom Emacs configuration"
            print "  ‚Ä¢ lazyvim          - Neovim LazyVim configuration"
            print "  ‚Ä¢ zed              - Zed editor configuration"
            print ""
            print "üìÇ Deployment Targets:"
            print "  ‚Ä¢ Scripts ‚Üí ~/.local/share/bin/ (as symlinks)"
            print "  ‚Ä¢ Doom Emacs ‚Üí ~/.doom.d/ (as symlinks)"
            print "  ‚Ä¢ LazyVim ‚Üí ~/.config/nvim/ (as symlinks)"
            print "  ‚Ä¢ Zed ‚Üí ~/.config/zed/ (as symlinks)"
        }
    }
}
