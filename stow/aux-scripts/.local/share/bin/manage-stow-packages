#!/usr/bin/env nu

# Stow Package Manager - Deploy and manage dotfiles and scripts using GNU Stow
#
# Manages deployment of scripts, editor configs, and development tools via GNU Stow.
# Supports deployment, removal, and complete restow operations.

def main [
    command?: string = "help"  # Command: deploy/install, remove/uninstall, restow, status, list, help
    --force (-f)               # Force deployment with --adopt (imports existing files)
] {
    let stow_dir = $"($env.HOME)/darwin-config/stow"
    
    if not ($stow_dir | path exists) {
        print "‚ùå Error: Stow directory not found at ~/darwin-config/stow"
        exit 1
    }
    
    # Determine stow options based on force flag
    let stow_options = if $force {
        ["--restow", "--adopt"]
    } else {
        []
    }
    
    let cmd = if ($command | is-empty) { "help" } else { $command }

    match $cmd {
        "deploy" | "install" => {
            if $force {
                print "üöÄ Force deploying stow packages (will overwrite existing files)..."
                print "‚ö†Ô∏è  Warning: Using --adopt mode - existing files will be imported into stow packages"
            } else {
                print "üöÄ Deploying stow packages..."
            }
            
            cd $stow_dir
            
            # Define all packages to deploy
            let packages = [
                "aux-scripts",
                "nix-scripts",
                "raycast-scripts",
                "cargo-tools",
                "nodejs-tools",
                "dotnet-tools",
                "lazyvim",
                "zed",
                "zellij-theme-management",
                "kitty"
            ]
            
            # Deploy each package and collect results
            let results = $packages | each { |package|
                print $"üì¶ Processing ($package)..."
                
                let result = try {
                    if ($stow_options | length) > 0 {
                        # With force options
                        run-external "stow" "-t" $env.HOME "--restow" "--adopt" $package
                    } else {
                        # Normal deployment
                        run-external "stow" "-t" $env.HOME $package
                    }
                    print $"  ‚úÖ ($package) deployed successfully"
                    {package: $package, success: true, error: null}
                } catch { |e|
                    print $"  ‚ùå Failed to deploy ($package): ($e.msg)"
                    {package: $package, success: false, error: $e.msg}
                }
                $result
            }
            
            let failed_packages = $results | where success == false | get package
            let success_count = $results | where success == true | length
            
            # Report results
            if ($failed_packages | length) == 0 {
                print "\n‚úÖ All stow packages deployed successfully!"
                print $"üìÇ Scripts are now available in ($env.HOME)/.local/share/bin/"
                print $"üé® Editor configs deployed to ~/.config/nvim/ and ~/.config/zed/"
                print $"üñºÔ∏è  Theme management tools deployed to ~/.local/bin/"
            } else {
                print $"\n‚ö†Ô∏è  Deployment completed with ($failed_packages | length) failures:"
                for failed in $failed_packages {
                    print $"  ‚Ä¢ ($failed)"
                }
                print "\nüí° Try running with --force flag to overwrite existing files:"
                print $"   manage-stow-packages deploy --force"
                if not $force {
                    exit 1
                }
            }
        }
        
        "remove" | "uninstall" => {
            print "üóëÔ∏è  Removing stow packages..."

            cd $stow_dir

            # Remove all packages (simple approach)
            let packages = [
                "kitty",
                "zellij-theme-management",
                "lazyvim",
                "zed",
                "cargo-tools",
                "nodejs-tools",
                "dotnet-tools",
                "nix-scripts",
                "raycast-scripts",
                "aux-scripts"  # This will remove this script too
            ]

            for package in $packages {
                print $"üì¶ Removing ($package)..."
                stow -D -t ~ $package
            }

            print "‚úÖ All stow packages removed successfully!"
            print "üìù Note: This script was also removed"
            print "üí° To re-deploy: run 'stow -t ~ aux-scripts' from ~/darwin-config/stow/, then 'manage-stow-packages deploy'"
        }

        "restow" => {
            print "üîÑ Complete restow: removing all packages and re-deploying..."

            # Step 1: Remove all packages (this will remove this script)
            cd $stow_dir

            let packages = [
                "kitty",
                "zellij-theme-management",
                "lazyvim",
                "zed",
                "cargo-tools",
                "nodejs-tools",
                "dotnet-tools",
                "nix-scripts",
                "raycast-scripts",
                "aux-scripts"
            ]

            print "üóëÔ∏è  Step 1: Removing all packages..."
            for package in $packages {
                print $"üì¶ Removing ($package)..."
                stow -D -t ~ $package
            }

            # Step 2: Re-deploy aux-scripts first to get this script back
            print "üì¶ Step 2: Re-deploying aux-scripts..."
            stow -t ~ aux-scripts

            # Step 3: Call deploy to handle the rest
            print "üöÄ Step 3: Deploying all packages..."
            nu $"($env.HOME)/.local/share/bin/manage-stow-packages" deploy
        }
        
        "status" => {
            print "üìä Checking status of auxiliary scripts..."
            
            let scripts = (ls $"($stow_dir)/aux-scripts/.local/share/bin" | get name | path basename)
            
            print $"\nüìÇ Available scripts in stow package: ($scripts | length)"
            for script in $scripts {
                print $"  ‚Ä¢ ($script)"
            }
            
            print $"\nüîó Deployed scripts:"
            for script in $scripts {
                let target_path = $"($env.HOME)/.local/share/bin/($script)"
                if ($target_path | path exists) {
                    let link_info = (ls -la $target_path | get 0)
                    if ($link_info.type == "symlink") {
                        print $"  ‚úÖ ($script) -> correctly symlinked"
                    } else {
                        print $"  ‚ö†Ô∏è  ($script) -> exists but not a symlink"
                    }
                } else {
                    print $"  ‚ùå ($script) -> not deployed"
                }
            }
        }
        
        "list" => {
            print "üìã Available scripts in stow package:"
            let scripts = (ls $"($stow_dir)/aux-scripts/.local/share/bin" | get name | path basename)
            for script in $scripts {
                print $"  ‚Ä¢ ($script)"
            }
        }
        
        "help" | "detailed-help" | _ => {
            print "üõ†Ô∏è  Stow Package Manager"
            print ""
            print "Usage: manage-stow-packages <command> [--force]"
            print ""
            print "Commands:"
            print "  deploy, install    Deploy all stow packages using stow"
            print "  remove, uninstall  Remove all stow packages (unstow)"
            print "  restow             Complete restow: remove all, then re-deploy"
            print "  status             Check deployment status of scripts"
            print "  list               List available scripts in aux-scripts"
            print "  help               Show this help message"
            print ""
            print "Options:"
            print "  --force, -f        Force deployment, overwriting existing files"
            print "                     Uses --restow and --adopt stow options"
            print "                     WARNING: --adopt imports existing files into stow packages"
            print ""
            print "Examples:"
            print "  manage-stow-packages deploy          # Safe deployment (fails on conflicts)"
            print "  manage-stow-packages deploy --force  # Force deployment (imports conflicting files)"
            print "  manage-stow-packages restow          # Complete clean restow (remove + deploy)"
            print "  manage-stow-packages remove          # Remove all packages"
            print ""
            print "üí° Tip: Use 'manage-stow-packages --help' for quick parameter reference"
            print ""
            print "üìÅ Available Stow Packages:"
            print "  ‚Ä¢ aux-scripts      - Core utility scripts"
            print "  ‚Ä¢ nix-scripts      - Nix-related utilities (smart-gc, etc.)"
            print "  ‚Ä¢ raycast-scripts  - Raycast automation scripts"
            print "  ‚Ä¢ cargo-tools      - Rust/Cargo tools management"
            print "  ‚Ä¢ nodejs-tools     - Node.js tools and toolchain"
            print "  ‚Ä¢ dotnet-tools     - .NET SDK and global tools"
            print "  ‚Ä¢ lazyvim          - Neovim LazyVim configuration"
            print "  ‚Ä¢ zed              - Zed editor configuration"
            print "  ‚Ä¢ zellij-theme-management - Zellij theme switching tools"
            print "  ‚Ä¢ kitty            - Kitty terminal configuration and automation"
            print ""
            print "üìÇ Deployment Targets:"
            print "  ‚Ä¢ Scripts ‚Üí ~/.local/share/bin/ (as symlinks)"
            print "  ‚Ä¢ LazyVim ‚Üí ~/.config/nvim/ (as symlinks)"
            print "  ‚Ä¢ Zed ‚Üí ~/.config/zed/ (as symlinks)"
            print "  ‚Ä¢ Kitty ‚Üí ~/.config/kitty/ + ~/.local/share/bin/ (as symlinks)"
            print "  ‚Ä¢ Theme Tools ‚Üí ~/.local/bin/ (as symlinks)"
        }
    }
}
