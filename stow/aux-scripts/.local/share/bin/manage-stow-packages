#!/usr/bin/env nu

# Script to manage stow packages using GNU Stow
# Usage: manage-stow-packages <command>

def main [command: string = "help"] {
    let stow_dir = $"($env.HOME)/darwin-config/stow"
    
    if not ($stow_dir | path exists) {
        print "‚ùå Error: Stow directory not found at ~/darwin-config/stow"
        exit 1
    }
    
    match $command {
        "deploy" | "install" => {
            print "üöÄ Deploying stow packages..."
            
            cd $stow_dir
            
            # Core script packages
            stow -t ~ aux-scripts
            stow -t ~ nix-scripts  
            stow -t ~ raycast-scripts
            
            # Development tool managers
            stow -t ~ cargo-tools
            stow -t ~ nodejs-tools
            stow -t ~ dotnet-tools
            
            # Editor configurations
            stow -t ~ doom-emacs
            stow -t ~ lazyvim
            stow -t ~ zed
            
            if $env.LAST_EXIT_CODE == 0 {
                print "‚úÖ Stow packages deployed successfully!"
                print $"üìÇ Scripts are now available in ($env.HOME)/.local/share/bin/"
                print $"üé® Editor configs deployed to ~/.doom.d/, ~/.config/nvim/, and ~/.config/zed/"
            } else {
                print "‚ùå Failed to deploy stow packages"
                exit 1
            }
        }
        
        "remove" | "uninstall" => {
            print "üóëÔ∏è  Removing stow packages..."
            
            cd $stow_dir
            
            # Core script packages  
            stow -D -t ~ aux-scripts
            stow -D -t ~ nix-scripts
            stow -D -t ~ raycast-scripts
            
            # Development tool managers
            stow -D -t ~ cargo-tools
            stow -D -t ~ nodejs-tools
            stow -D -t ~ dotnet-tools
            
            # Editor configurations
            stow -D -t ~ doom-emacs
            stow -D -t ~ lazyvim
            stow -D -t ~ zed
            
            if $env.LAST_EXIT_CODE == 0 {
                print "‚úÖ Stow packages removed successfully!"
            } else {
                print "‚ùå Failed to remove stow packages"
                exit 1
            }
        }
        
        "status" => {
            print "üìä Checking status of auxiliary scripts..."
            
            let scripts = (ls $"($stow_dir)/aux-scripts/.local/share/bin" | get name | path basename)
            
            print $"\nüìÇ Available scripts in stow package: ($scripts | length)"
            for script in $scripts {
                print $"  ‚Ä¢ ($script)"
            }
            
            print $"\nüîó Deployed scripts:"
            for script in $scripts {
                let target_path = $"($env.HOME)/.local/share/bin/($script)"
                if ($target_path | path exists) {
                    let link_info = (ls -la $target_path | get 0)
                    if ($link_info.type == "symlink") {
                        print $"  ‚úÖ ($script) -> correctly symlinked"
                    } else {
                        print $"  ‚ö†Ô∏è  ($script) -> exists but not a symlink"
                    }
                } else {
                    print $"  ‚ùå ($script) -> not deployed"
                }
            }
        }
        
        "list" => {
            print "üìã Available scripts in stow package:"
            let scripts = (ls $"($stow_dir)/aux-scripts/.local/share/bin" | get name | path basename)
            for script in $scripts {
                print $"  ‚Ä¢ ($script)"
            }
        }
        
        "help" | _ => {
            print "üõ†Ô∏è  Stow Package Manager"
            print ""
            print "Usage: manage-stow-packages <command>"
            print ""
            print "Commands:"
            print "  deploy, install    Deploy all stow packages using stow"
            print "  remove, uninstall  Remove all stow packages (unstow)"
            print "  status             Check deployment status of scripts"
            print "  list               List available scripts in aux-scripts"
            print "  help               Show this help message"
            print ""
            print "üìÅ Available Stow Packages:"
            print "  ‚Ä¢ aux-scripts      - Core utility scripts"
            print "  ‚Ä¢ nix-scripts      - Nix-related utilities (smart-gc, etc.)"
            print "  ‚Ä¢ raycast-scripts  - Raycast automation scripts"
            print "  ‚Ä¢ cargo-tools      - Rust/Cargo tools management"
            print "  ‚Ä¢ nodejs-tools     - Node.js tools and toolchain"
            print "  ‚Ä¢ dotnet-tools     - .NET SDK and global tools"
            print "  ‚Ä¢ doom-emacs       - Complete Doom Emacs configuration"
            print "  ‚Ä¢ lazyvim          - Neovim LazyVim configuration"
            print "  ‚Ä¢ zed              - Zed editor configuration"
            print ""
            print "üìÇ Deployment Targets:"
            print "  ‚Ä¢ Scripts ‚Üí ~/.local/share/bin/ (as symlinks)"
            print "  ‚Ä¢ Doom Emacs ‚Üí ~/.doom.d/ (as symlinks)"
            print "  ‚Ä¢ LazyVim ‚Üí ~/.config/nvim/ (as symlinks)"
            print "  ‚Ä¢ Zed ‚Üí ~/.config/zed/ (as symlinks)"
        }
    }
}
