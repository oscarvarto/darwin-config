#!/usr/bin/env nu

# Script to manage auxiliary scripts using GNU Stow
# Usage: manage-aux-scripts <command>

def main [command: string = "help"] {
    let stow_dir = $"($env.HOME)/nixos-config/stow"
    
    if not ($stow_dir | path exists) {
        print "‚ùå Error: Stow directory not found at ~/nixos-config/stow"
        exit 1
    }
    
    match $command {
        "deploy" | "install" => {
            print "üöÄ Deploying auxiliary scripts..."
            
            cd $stow_dir
            stow aux-scripts
            stow cargo-tools
            stow nodejs-tools
            stow dotnet-tools
            stow mise-tools
            stow doom-emacs
            
            if $env.LAST_EXIT_CODE == 0 {
                print "‚úÖ Auxiliary scripts deployed successfully!"
                print $"üìÇ Scripts are now available in ($env.HOME)/.local/share/bin/"
            } else {
                print "‚ùå Failed to deploy scripts"
                exit 1
            }
        }
        
        "remove" | "uninstall" => {
            print "üóëÔ∏è  Removing auxiliary scripts..."
            
            cd $stow_dir
            stow -D aux-scripts
            stow -D cargo-tools
            stow -D nodejs-tools
            stow -D dotnet-tools
            stow -D mise-tools
            stow -D doom-emacs
            
            if $env.LAST_EXIT_CODE == 0 {
                print "‚úÖ Auxiliary scripts removed successfully!"
            } else {
                print "‚ùå Failed to remove scripts"
                exit 1
            }
        }
        
        "status" => {
            print "üìä Checking status of auxiliary scripts..."
            
            let scripts = (ls $"($stow_dir)/aux-scripts/.local/share/bin" | get name | path basename)
            
            print $"\nüìÇ Available scripts in stow package: ($scripts | length)"
            for script in $scripts {
                print $"  ‚Ä¢ ($script)"
            }
            
            print $"\nüîó Deployed scripts:"
            for script in $scripts {
                let target_path = $"($env.HOME)/.local/share/bin/($script)"
                if ($target_path | path exists) {
                    let link_info = (ls -la $target_path | get 0)
                    if ($link_info.type == "symlink") {
                        print $"  ‚úÖ ($script) -> correctly symlinked"
                    } else {
                        print $"  ‚ö†Ô∏è  ($script) -> exists but not a symlink"
                    }
                } else {
                    print $"  ‚ùå ($script) -> not deployed"
                }
            }
        }
        
        "list" => {
            print "üìã Available scripts in stow package:"
            let scripts = (ls $"($stow_dir)/aux-scripts/.local/share/bin" | get name | path basename)
            for script in $scripts {
                print $"  ‚Ä¢ ($script)"
            }
        }
        
        "help" | _ => {
            print "üõ†Ô∏è  Auxiliary Scripts Manager"
            print ""
            print "Usage: manage-aux-scripts <command>"
            print ""
            print "Commands:"
            print "  deploy, install    Deploy scripts using stow"
            print "  remove, uninstall  Remove scripts (unstow)"
            print "  status             Check deployment status"
            print "  list               List available scripts"
            print "  help               Show this help message"
            print ""
            print "Scripts are managed in ~/nixos-config/stow/aux-scripts/"
            print "Cargo tools are managed in ~/nixos-config/stow/cargo-tools/"
            print "Node.js tools are managed in ~/nixos-config/stow/nodejs-tools/"
            print ".NET tools are managed in ~/nixos-config/stow/dotnet-tools/"
            print "Mise runtimes are managed in ~/nixos-config/stow/mise-tools/"
            print "Doom Emacs configuration is managed in ~/nixos-config/stow/doom-emacs/"
            print "Scripts will be deployed to ~/.local/share/bin/ as symlinks"
            print "Doom Emacs config will be deployed to ~/.doom.d/ as symlinks"
        }
    }
}
