#!/usr/bin/env nu

# Script to manage Doom Emacs configuration using stow
# Usage: manage-doom-config <command>

def main [command: string = "help"] {
    let stow_dir = $"($env.HOME)/darwin-config/stow"
    let doom_config_dir = $"($stow_dir)/doom-emacs/.doom.d"
    
    if not ($doom_config_dir | path exists) {
        print "‚ùå Error: Doom Emacs config directory not found at ~/darwin-config/stow/doom-emacs/.doom.d"
        exit 1
    }
    
    match $command {
        "status" => {
            print "üìä Doom Emacs configuration status:"
            
            # Check if symlink exists
            let symlink_path = $"($env.HOME)/.doom.d"
            if ($symlink_path | path exists) {
                # Use external ls to detect symlinks properly
                let link_info = (run-external "ls" "-la" $symlink_path | lines | get 0)
                if ($link_info | str contains "->" ) {
                    print "‚úÖ Configuration is properly linked via stow"
                    print $"üîó ($link_info)"
                } else {
                    print "‚ö†Ô∏è  ~/.doom.d exists but is not a symlink"
                }
            } else {
                print "‚ùå ~/.doom.d symlink not found"
                print "üí° Run 'manage-aux-scripts deploy' to create symlinks"
            }
            
            # Check key configuration files
            print "\nüìã Key configuration files:"
            let key_files = ["init.el", "packages.el", "config.el", "custom.el"]
            for file in $key_files {
                let file_path = $"($doom_config_dir)/($file)"
                if ($file_path | path exists) {
                    print $"  ‚úÖ ($file)"
                } else {
                    print $"  ‚ùå ($file) - missing"
                }
            }
            
            # Check config subdirectories
            print "\nüìÅ Configuration modules:"
            let config_subdirs = (ls $"($doom_config_dir)/config" | where type == dir | get name | path basename)
            for subdir in $config_subdirs {
                let file_count = (ls $"($doom_config_dir)/config/($subdir)" | where name =~ '\.el$' | length)
                print $"  üì¶ ($subdir): ($file_count) elisp files"
            }
        }
        
        "validate" => {
            print "üîç Validating Doom Emacs configuration files..."
            
            # Find all .el files in the configuration
            let elisp_files = (run-external "find" $doom_config_dir "-name" "*.el" | lines)
            let total_files = ($elisp_files | length)
            print $"\nüìÑ Found ($total_files) elisp files to validate"
            
            mut validation_errors = 0
            for file in $elisp_files {
                print $"  Checking ($file | path basename)..."
                let result = (try {
                    run-external "elisp-formatter.js" "check" $file
                    "‚úÖ"
                } catch { |err|
                    print $"    ‚ùå Validation failed: ($err.msg)"
                    "‚ùå"
                })
                
                if $result == "‚úÖ" {
                    print $"    ‚úÖ Valid"
                } else {
                    $validation_errors = ($validation_errors + 1)
                }
            }
            
            if $validation_errors == 0 {
                print $"\nüéâ All ($total_files) elisp files passed validation!"
            } else {
                print $"\n‚ö†Ô∏è  ($validation_errors) files failed validation"
                exit 1
            }
        }
        
        "sync" => {
            print "üîÑ Syncing Doom Emacs configuration..."
            
            # First validate configuration
            print "1Ô∏è‚É£ Validating configuration..."
            try {
                manage-doom-config validate
            } catch {
                print "‚ùå Configuration validation failed, aborting sync"
                exit 1
            }
            
            # Run doom sync
            print "\n2Ô∏è‚É£ Running doom sync..."
            try {
                doom sync
                print "‚úÖ Doom sync completed successfully"
            } catch {
                print "‚ùå Doom sync failed"
                exit 1
            }
        }
        
        "edit" => {
            print "üìù Opening Doom Emacs configuration for editing..."
            
            # Check if Emacs is available
            try {
                which emacs
            } catch {
                print "‚ùå Emacs not found in PATH"
                exit 1
            }
            
            # Open the configuration directory in Emacs
            print $"üöÄ Opening ($doom_config_dir) in Emacs..."
            emacs $doom_config_dir
        }
        
        "backup" => {
            print "üíæ Creating backup of Doom Emacs configuration..."
            
            let timestamp = (date now | format date "%Y%m%d-%H%M%S")
            let backup_dir = $"($env.HOME)/doom-config-backup-($timestamp)"
            
            try {
                cp -r $doom_config_dir $backup_dir
                print $"‚úÖ Backup created at ($backup_dir)"
            } catch {
                print "‚ùå Failed to create backup"
                exit 1
            }
        }
        
        "info" => {
            print "‚ÑπÔ∏è  Doom Emacs configuration information:"
            print $"üìÇ Stow directory: ($stow_dir)/doom-emacs"
            print $"üîß Configuration: ($doom_config_dir)"
            print $"üîó Symlink target: ($env.HOME)/.doom.d"
            
            # Show git status if in git repo
            try {
                cd $stow_dir
                let git_status = (git status --porcelain | lines | where { |line| $line | str starts-with "doom-emacs" })
                if ($git_status | length) > 0 {
                    print "\nüìã Git status for doom-emacs:"
                    for line in $git_status {
                        print $"  ($line)"
                    }
                } else {
                    print "\n‚úÖ No uncommitted changes in doom-emacs configuration"
                }
            } catch {
                print "\nüí° Not in a git repository or git not available"
            }
        }
        
        "help" | _ => {
            print "üõ†Ô∏è  Doom Emacs Configuration Manager"
            print ""
            print "Usage: manage-doom-config <command>"
            print ""
            print "Commands:"
            print "  status      Check configuration deployment status"
            print "  validate    Validate all elisp files for syntax errors"
            print "  sync        Validate config and run 'doom sync'"
            print "  edit        Open configuration in Emacs"
            print "  backup      Create timestamped backup of configuration"
            print "  info        Show configuration information and git status"
            print "  help        Show this help message"
            print ""
            print "Configuration is managed via stow in ~/darwin-config/stow/doom-emacs/"
            print "Files are symlinked to ~/.doom.d/ for use by Doom Emacs"
            print ""
            print "üí° Tips:"
            print "  - Edit files in the stow directory to preserve version control"
            print "  - Run 'validate' before committing configuration changes"
            print "  - Use 'sync' after making configuration changes"
            print "  - Configuration is automatically active via symlinks"
        }
    }
}
