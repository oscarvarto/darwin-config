#!/usr/bin/env bash

# Fix Homebrew Zsh completions script
# Resolves compinit errors related to missing or broken completion files
# Now supports multiple completion files and general completion issues

set -euo pipefail

SCRIPT_NAME="fix-homebrew-completions"
HOMEBREW_PREFIX="/opt/homebrew"
COMPLETIONS_DIR="${HOMEBREW_PREFIX}/completions/zsh"
SITE_FUNCTIONS_DIR="${HOMEBREW_PREFIX}/share/zsh/site-functions"

log() {
    echo "[$SCRIPT_NAME] $*"
}

# Check for broken symlinks in site-functions
check_broken_symlinks() {
    local broken_links=()
    local site_functions_dir="$1"
    
    if [[ ! -d "$site_functions_dir" ]]; then
        log "‚ö†Ô∏è  Site functions directory doesn't exist: $site_functions_dir"
        return 0
    fi
    
    cd "$site_functions_dir" || return 1
    
    for link in _*; do
        [[ -e "$link" ]] || continue  # Skip if no completion files exist
        if [[ -L "$link" && ! -e "$link" ]]; then
            broken_links+=("$link")
            log "üîó Found broken symlink: $link -> $(readlink "$link")"
        fi
    done
    
    echo "${#broken_links[@]}"
}

# Create a generic completion template
create_generic_completion() {
    local comp_name="$1"
    local comp_file="$2"
    local command_name="${comp_name#_}"  # Remove leading underscore
    
    cat > "$comp_file" << EOF
#compdef $command_name

# Basic $command_name completion
# Auto-generated by fix-homebrew-completions

_$command_name() {
    local context state line
    typeset -A opt_args
    
    _arguments \\
        '--help[Show help information]' \\
        '--version[Show version information]' \\
        '*: :_files' && return 0
}

_$command_name "\$@"
EOF
}

# Create specific completion for known commands
create_specific_completion() {
    local comp_name="$1"
    local comp_file="$2"
    
    case "$comp_name" in
        "_brew")
            cat > "$comp_file" << 'EOF'
#compdef brew

# Homebrew completion
# Enhanced version with common commands

_brew() {
    local context state line
    typeset -A opt_args
    
    _arguments \\
        '1: :->commands' \\
        '*: :->args' && return 0
        
    case $state in
        commands)
            local commands
            commands=(
                'install:Install a formula or cask'
                'uninstall:Uninstall a formula or cask'
                'update:Update Homebrew'
                'upgrade:Upgrade outdated formulae'
                'search:Search for formulae or casks'
                'list:List installed formulae and casks'
                'info:Display information about a formula or cask'
                'doctor:Check system for potential problems'
                'cleanup:Remove old versions of formulae'
                'services:Manage background services'
                'tap:Add a new tap'
                'untap:Remove a tap'
                'deps:Show dependencies'
                'uses:Show what uses a formula'
            )
            _describe -t commands 'brew commands' commands
            ;;
        args)
            # Try to complete with available formulae, fallback to files
            _alternative \\
                'formulae:formulae:($(brew search 2>/dev/null | head -50))' \\
                'files:files:_files'
            ;;
    esac
}

_brew "$@"
EOF
            ;;
        "_git")
            # For git, we might want a more comprehensive completion
            create_generic_completion "$comp_name" "$comp_file"
            ;;
        *)
            # For unknown commands, create a generic completion
            create_generic_completion "$comp_name" "$comp_file"
            ;;
    esac
}

main() {
    local mode="${1:-auto}"  # auto, check, or specific completion name
    
    log "üîß Fixing Homebrew Zsh completions..."
    
    # Create completions directory if it doesn't exist
    if [[ ! -d "$COMPLETIONS_DIR" ]]; then
        log "üìÅ Creating completions directory: $COMPLETIONS_DIR"
        mkdir -p "$COMPLETIONS_DIR"
    fi
    
    # Check for broken symlinks
    local broken_count
    broken_count=$(check_broken_symlinks "$SITE_FUNCTIONS_DIR")
    
    if [[ "$mode" == "check" ]]; then
        log "üîç Completion check mode"
        if [[ "$broken_count" -gt 0 ]]; then
            log "‚ö†Ô∏è  Found $broken_count broken completion symlink(s)"
            return 1
        else
            log "‚úÖ All completion symlinks are working"
            return 0
        fi
    fi
    
    local fixed_count=0
    
    # Handle specific completion if requested
    if [[ "$mode" != "auto" && "$mode" != "check" ]]; then
        local comp_name="$mode"
        [[ "$comp_name" = _* ]] || comp_name="_$comp_name"  # Add underscore if missing
        
        log "üéØ Fixing specific completion: $comp_name"
        
        if fix_completion "$comp_name"; then
            ((fixed_count++))
        fi
    else
        # Auto mode: fix known problematic completions and any broken symlinks
        local completions_to_fix=(
            "_brew"  # Most common issue
        )
        
        # Add any broken symlinks we found
        if [[ "$broken_count" -gt 0 ]]; then
            cd "$SITE_FUNCTIONS_DIR" || exit 1
            for link in _*; do
                [[ -e "$link" ]] || continue
                if [[ -L "$link" && ! -e "$link" ]]; then
                    local comp_name="$(basename "$link")"
                    if [[ ! " ${completions_to_fix[*]} " =~ " $comp_name " ]]; then
                        completions_to_fix+=("$comp_name")
                    fi
                fi
            done
        fi
        
        # Fix each completion
        for comp_name in "${completions_to_fix[@]}"; do
            log "üîß Fixing completion: $comp_name"
            if fix_completion "$comp_name"; then
                ((fixed_count++))
            fi
        done
    fi
    
    # Final verification and summary
    log "üìä Summary: Fixed $fixed_count completion(s)"
    
    if [[ "$fixed_count" -gt 0 ]]; then
        log "üéâ Completion fixes applied successfully!"
        log "üí° Restart your shell or run 'autoload -U compinit && compinit' to reload completions"
        
        # Test compinit to see if there are still errors
        local compinit_errors
        compinit_errors=$(autoload -U compinit && compinit 2>&1 | wc -l)
        if [[ "$compinit_errors" -gt 0 ]]; then
            log "‚ö†Ô∏è  There may still be completion issues. Run 'fix-homebrew-completions check' for details"
        else
            log "‚úÖ All completions loaded successfully!"
        fi
    else
        log "‚ÑπÔ∏è  No fixes needed - all completions appear to be working"
    fi
}

# Fix a specific completion file
fix_completion() {
    local comp_name="$1"
    local comp_file="$COMPLETIONS_DIR/$comp_name"
    local symlink_path="$SITE_FUNCTIONS_DIR/$comp_name"
    local fixed=false
    
    # Check if completion file exists and has content
    if [[ ! -s "$comp_file" ]]; then
        log "üìù Creating completion file: $comp_name"
        create_specific_completion "$comp_name" "$comp_file"
        fixed=true
    fi
    
    # Ensure the symlink exists and points to the right location
    if [[ ! -L "$symlink_path" ]] || [[ ! -e "$symlink_path" ]]; then
        log "üîó Creating/fixing symlink: $comp_name"
        rm -f "$symlink_path"
        ln -sf "../../../completions/zsh/$comp_name" "$symlink_path"
        fixed=true
    fi
    
    if [[ "$fixed" == "true" ]]; then
        log "‚úÖ Fixed completion: $comp_name"
        return 0
    else
        log "‚ÑπÔ∏è  Completion already working: $comp_name"
        return 1
    fi
}

# Show help information
show_help() {
    cat << 'EOF'
üîß Fix Homebrew Zsh Completions

Fixes missing or broken Zsh completion files for Homebrew and other tools.

USAGE:
    fix-homebrew-completions [COMMAND|COMPLETION]

COMMANDS:
    (no args)     Auto-fix mode: fix _brew and any broken completion symlinks
    check         Check for broken completion symlinks (non-destructive)
    help          Show this help message
    
COMPLETION NAMES:
    You can specify a specific completion to fix:
    _brew         Fix Homebrew completion specifically  
    _git          Fix Git completion
    any_command   Fix completion for 'any_command' (creates _any_command)

EXAMPLES:
    fix-homebrew-completions           # Auto-fix mode
    fix-homebrew-completions check     # Check for issues
    fix-homebrew-completions _brew     # Fix only Homebrew completion
    fix-homebrew-completions git       # Fix Git completion (creates _git)

FEATURES:
    - Detects broken completion symlinks automatically
    - Creates missing completion files with sensible defaults
    - Supports specific completions for known commands (brew, git, etc.)
    - Provides generic completion templates for unknown commands
    - Tests completion loading after fixes

FILES:
    /opt/homebrew/completions/zsh/         - Completion files
    /opt/homebrew/share/zsh/site-functions/ - Symlinks to completions
EOF
}

# Main script execution
if [[ $# -eq 0 ]]; then
    main "auto"
elif [[ "$1" == "help" || "$1" == "-h" || "$1" == "--help" ]]; then
    show_help
else
    main "$1"
fi
