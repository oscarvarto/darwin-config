#!/bin/sh -e

GREEN='\033[1;32m'
YELLOW='\033[1;33m'
RED='\033[1;31m'
NC='\033[0m'

SYSTEM_TYPE="aarch64-darwin"
# Try to get the hostname, fall back to predator if not found
HOSTNAME="$(hostname -s 2>/dev/null || echo 'predator')"
FLAKE_SYSTEM="darwinConfigurations.${HOSTNAME}.system"

# Parse arguments for verbose flag
VERBOSE=false
ARGS=()
for arg in "$@"; do
    if [[ "$arg" == "--verbose" ]]; then
        VERBOSE=true
    else
        ARGS+=("$arg")
    fi
done

export NIXPKGS_ALLOW_UNFREE=1

if $VERBOSE; then
    echo "${YELLOW}Starting build with verbose output...${NC}"
else
    echo "${YELLOW}Running build for ${SYSTEM_TYPE}${NC}"
fi
echo "${YELLOW}System configuration: $FLAKE_SYSTEM${NC}"
echo "${YELLOW}Using all available CPU cores for maximum build speed${NC}"

# Build with or without verbose flags based on user preference
# Filter out the repetitive toPlist deprecation warnings from nix-darwin
if $VERBOSE; then
    nix --extra-experimental-features 'nix-command flakes' build .#$FLAKE_SYSTEM --verbose --print-build-logs --show-trace "${ARGS[@]}" 2>&1 | grep -v "evaluation warning: Using.*lib.generators.toPlist.*without.*escape = true.*is deprecated" || true
else
    nix --extra-experimental-features 'nix-command flakes' build .#$FLAKE_SYSTEM "${ARGS[@]}" 2>&1 | grep -v "evaluation warning: Using.*lib.generators.toPlist.*without.*escape = true.*is deprecated" || true
fi


echo "${YELLOW}Cleaning up...${NC}"
unlink ./result || true

echo "${GREEN}Build complete!${NC}"
