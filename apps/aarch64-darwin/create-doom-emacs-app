#!/usr/bin/env bash
set -e

# Colors for output
RED='\\033[0;31m'
GREEN='\\033[0;32m'
YELLOW='\\033[1;33m'
BLUE='\\033[0;34m'
NC='\\033[0m' # No Color

# Helper functions
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_step() {
    echo -e "${BLUE}==>${NC} $1"
}

# Check if emacs-plus@31 is installed and working
check_emacs_installation() {
    if brew list --formula emacs-plus@31 &>/dev/null; then
        print_status "emacs-plus@31 is installed"
        
        # Check if Emacs.app exists in Applications (could be file or directory)
        if [[ -e "/Applications/Emacs.app" ]]; then
            print_success "Emacs.app is properly linked in /Applications"
            return 0
        else
            print_warning "emacs-plus@31 installed but /Applications/Emacs.app missing"
            return 1
        fi
    else
        print_warning "emacs-plus@31 is not installed"
        return 2
    fi
}

# Check if Doom Emacs is installed
check_doom_installation() {
    if [[ -d "$HOME/.config/emacs" ]] && [[ -f "$HOME/.config/emacs/bin/doom" ]]; then
        print_status "Doom Emacs is already installed"
        return 0
    else
        print_warning "Doom Emacs not found"
        return 1
    fi
}

# Check if doom config is synced
check_doom_sync() {
    if [[ -d "$HOME/.doom.d" ]] && [[ -f "$HOME/.doom.d/config.el" ]]; then
        # Check if .doom.d is newer than the last sync
        local config_time=$(stat -c "%Y" "$HOME/.doom.d/config.el" 2>/dev/null || stat -f "%m" "$HOME/.doom.d/config.el" 2>/dev/null || echo "0")
        local cache_time=$(stat -c "%Y" "$HOME/.config/emacs/.local" 2>/dev/null || stat -f "%m" "$HOME/.config/emacs/.local" 2>/dev/null || echo "0")
        
        if [[ $config_time -gt $cache_time ]]; then
            print_warning "Doom config appears to need syncing"
            return 1
        else
            print_success "Doom config is up to date"
            return 0
        fi
    else
        print_warning "Doom config directory not found"
        return 1
    fi
}

# Install or fix emacs-plus@31
setup_emacs_plus() {
    local emacs_status
    check_emacs_installation
    emacs_status=$?
    
    case $emacs_status in
        0)
            print_success "emacs-plus@31 is properly installed and configured"
            return 0
            ;;
        1)
            print_step "Fixing emacs-plus@31 application link"
            # Only run postinstall to fix the app link
            if brew postinstall emacs-plus@31; then
                print_success "Fixed Emacs.app link"
            else
                print_warning "Postinstall had issues, but continuing..."
            fi
            ;;
        2)
            print_step "Installing emacs-plus@31"
            # Add tap if not already added
            if ! brew tap | grep -q "d12frosted/emacs-plus"; then
                brew tap d12frosted/emacs-plus
            fi
            
            # Install emacs-plus@31
            brew install emacs-plus@31 --with-dragon-icon --with-native-comp --with-poll
            
            # Run postinstall
            if ! brew postinstall emacs-plus@31; then
                print_warning "Postinstall failed, attempting manual fix..."
                
                # Create necessary directories
                mkdir -p "/opt/homebrew/share/info"
                
                # Fix permissions
                if [[ -d "/opt/homebrew/share/info" ]]; then
                    sudo chmod 755 "/opt/homebrew/share/info"
                fi
                
                # Retry postinstall
                brew postinstall emacs-plus@31 || print_warning "Postinstall still failing, but Emacs should work"
            fi
            ;;
    esac
}

# Install Doom Emacs
setup_doom_emacs() {
    if check_doom_installation; then
        print_success "Doom Emacs already installed, skipping clone step"
    else
        print_step "Installing Doom Emacs"
        
        # Remove any existing incomplete installation
        [[ -d "$HOME/.config/emacs" ]] && rm -rf "$HOME/.config/emacs"
        
        # Clone Doom Emacs
        git clone --depth 1 https://github.com/doomemacs/doomemacs "$HOME/.config/emacs"
        
        # Install Doom
        "$HOME/.config/emacs/bin/doom" install --no-env --no-fonts
    fi
}

# Sync Doom configuration
sync_doom_config() {
    if check_doom_sync; then
        print_success "Doom config is already synced, skipping sync step"
    else
        print_step "Syncing Doom Emacs configuration"
        "$HOME/.config/emacs/bin/doom" sync
    fi
}

# Main execution
main() {
    print_step "Starting optimized Doom Emacs app creation"
    
    # Step 1: Setup emacs-plus@31 (only if needed)
    setup_emacs_plus
    
    # Step 2: Setup Doom Emacs (only if needed)
    setup_doom_emacs
    
    # Step 3: Add doom to PATH in fish config (if not already there)
    local fish_config="$HOME/.config/fish/config.fish"
    if [[ -f "$fish_config" ]] && ! grep -q "doom" "$fish_config"; then
        print_step "Adding Doom to fish PATH"
        echo 'fish_add_path ~/.config/emacs/bin' >> "$fish_config"
    fi
    
    # Step 4: Sync configuration (only if needed)
    sync_doom_config
    
    print_success "Doom Emacs app creation completed!"
    print_status "You can now use:"
    echo "  - 'emacs' or 'Emacs.app' to start GUI Emacs"
    echo "  - 'emacs -nw' for terminal Emacs"
    echo "  - 'doom doctor' to check your configuration"
    echo "  - 'doom sync' to sync after config changes"
}

# Run main function
main "$@"
