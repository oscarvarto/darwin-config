#!/bin/sh -e

GREEN='\033[1;32m'
YELLOW='\033[1;33m'
RED='\033[1;31m'
NC='\033[0m'

SYSTEM_TYPE="aarch64-darwin"
FLAKE_SYSTEM="darwinConfigurations.${SYSTEM_TYPE}.system"

# Smart detection and handling for Emacs.app installation/linking
ensure_emacs_postinstall_and_alias() {
  # Only proceed if Homebrew is available
  if command -v brew > /dev/null 2>&1; then
    # Check if the formula is known/installed in any form
    if brew ls --versions d12frosted/emacs-plus/emacs-plus@31 > /dev/null 2>&1 \
       || brew ls --versions emacs-plus@31 > /dev/null 2>&1; then
      
      desired_app="/opt/homebrew/opt/emacs-plus@31/Emacs.app"
      
      # Smart detection: check if everything is already properly configured
      emacs_needs_work=false
      
      # Check if the desired app exists and /Applications alias is correct
      if [ -e "${desired_app}" ]; then
        if [ -e "/Applications/Emacs.app" ]; then
          if [ -L "/Applications/Emacs.app" ]; then
            target="$(readlink "/Applications/Emacs.app" 2>/dev/null || true)"
            if [ "${target}" != "${desired_app}" ]; then
              emacs_needs_work=true
            fi
          fi
        else
          emacs_needs_work=true
        fi
      else
        emacs_needs_work=true
      fi
      
      if [ "$emacs_needs_work" = "true" ]; then
        echo "${YELLOW}Emacs.app configuration needs updates - applying fixes...${NC}"
        
        # First, ensure install-info directory exists and is writable
        emacs_cellar="$(brew --cellar emacs-plus@31 2>/dev/null || brew --cellar d12frosted/emacs-plus/emacs-plus@31 2>/dev/null)"
        if [ -n "$emacs_cellar" ] && [ -d "$emacs_cellar" ]; then
          latest_version="$(ls -1 "$emacs_cellar" | sort -V | tail -1)"
          info_dir="$emacs_cellar/$latest_version/share/info/emacs"
          if [ -d "$info_dir" ]; then
            echo "${YELLOW}  → Fixing info directory permissions for install-info...${NC}"
            chmod -R u+w "$info_dir" 2>/dev/null || true
            # Create dir file if it doesn't exist
            if [ ! -f "$info_dir/dir" ]; then
              touch "$info_dir/dir" 2>/dev/null || true
            fi
          fi
        fi
        
        # Run postinstall to complete the installation and create Emacs.app
        echo "${YELLOW}  → Running brew postinstall to complete emacs-plus@31 setup...${NC}"
        if ! brew postinstall d12frosted/emacs-plus/emacs-plus@31 2>/dev/null; then
          brew postinstall emacs-plus@31 2>/dev/null || true
        fi
        
        # Remove stale symlink only (do not remove a real app bundle)
        if [ -L "/Applications/Emacs.app" ]; then
          target="$(readlink "/Applications/Emacs.app" 2>/dev/null || true)"
          if [ "${target}" != "${desired_app}" ]; then
            echo "${YELLOW}  → Removing stale Emacs.app symlink from /Applications...${NC}"
            rm -f "/Applications/Emacs.app" || true
          fi
        fi
        
        # Create Finder alias if it doesn't exist
        if [ -e "${desired_app}" ] && [ ! -e "/Applications/Emacs.app" ]; then
          echo "${YELLOW}  → Creating Emacs.app alias in /Applications...${NC}"
          osascript -e 'tell application "Finder" to make alias file to posix file "/opt/homebrew/opt/emacs-plus@31/Emacs.app" at posix file "/Applications" with properties {name:"Emacs.app"}' || true
        fi
      else
        echo "${GREEN}✅ Emacs.app already properly configured - skipping unnecessary steps${NC}"
      fi
    else
      echo "${YELLOW}emacs-plus@31 not detected - skipping Emacs configuration${NC}"
    fi
  else
    echo "${YELLOW}Homebrew not available - skipping Emacs configuration${NC}"
  fi
}

export NIXPKGS_ALLOW_UNFREE=1

echo "${YELLOW}Starting build...${NC}"
# Filter out the repetitive toPlist deprecation warnings from nix-darwin
nix --extra-experimental-features 'nix-command flakes' build .#$FLAKE_SYSTEM $@ 2>&1 | grep -v "evaluation warning: Using.*lib.generators.toPlist.*without.*escape = true.*is deprecated" || true

# Work around emacs-plus@31 postinstall/alias issues before switching
ensure_emacs_postinstall_and_alias || true

echo "${YELLOW}Switching to new generation...${NC}"
# See https://github.com/nix-darwin/nix-darwin/issues/1457 on why we need sudo
# Filter out the repetitive toPlist deprecation warnings from darwin-rebuild switch as well
sudo -u root ./result/sw/bin/darwin-rebuild switch --flake .#${SYSTEM_TYPE} $@ 2>&1 | grep -v "evaluation warning: Using.*lib.generators.toPlist.*without.*escape = true.*is deprecated" || true

# Ensure alias again (idempotent) in case switch modified contents
ensure_emacs_postinstall_and_alias || true

echo "${YELLOW}Cleaning up...${NC}"
unlink ./result || true

echo "${GREEN}Switch to new generation complete!${NC}"
